{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\susan\\\\OneDrive\\\\Documents\\\\GitHub\\\\google-clone\\\\src\\\\contexts\\\\ResultContextProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultContext = /*#__PURE__*/createContext();\nconst baseUrl = \"https://google-search3.p.rapidapi.com/api/v1\";\nexport const ResultContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"Maths\"); // /videos, /search, /images\n\n  const getResults = async type => {\n    setIsLoading(true);\n    const response = await fetch(`${baseUrl}${type}`, {\n      method: \"GET\",\n      headers: {\n        \"x-user-agent\": \"desktop\",\n        \"x-proxy-location\": \"US\",\n        \"x-rapidapi-host\": \"google-search3.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"290dc5d251msh9256771c29f1735p1b278ejsna6a427f07e04\"\n      }\n    });\n    const data = await response.json(); // console.log(type, data, searchTerm);\n\n    if (type.includes(\"/news\")) {\n      setResults(data.entries);\n    } else if (type.includes(\"/images\")) {\n      setResults(data.image_results);\n    } else {\n      setResults(data.results);\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ResultContext.Provider, {\n    value: {\n      getResults,\n      results,\n      searchTerm,\n      setSearchTerm,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ResultContextProvider, \"LvpE1bhf/DjeDeWGS0RY7X0yWTI=\");\n\n_c = ResultContextProvider;\nexport const useResultContext = () => {\n  _s2();\n\n  return useContext(ResultContext);\n};\n\n_s2(useResultContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultContextProvider\");","map":{"version":3,"sources":["C:/Users/susan/OneDrive/Documents/GitHub/google-clone/src/contexts/ResultContextProvider.js"],"names":["React","createContext","useContext","useState","ResultContext","baseUrl","ResultContextProvider","children","results","setResults","isLoading","setIsLoading","searchTerm","setSearchTerm","getResults","type","response","fetch","method","headers","data","json","includes","entries","image_results","useResultContext"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;;AAEA,MAAMC,aAAa,gBAAGH,aAAa,EAAnC;AACA,MAAMI,OAAO,GAAG,8CAAhB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,OAAD,CAA5C,CAHmD,CAKnD;;AACA,QAAMW,UAAU,GAAG,MAAOC,IAAP,IAAgB;AAC/BJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,UAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEZ,OAAQ,GAAEU,IAAK,EAAnB,EAAsB;AAC9CG,MAAAA,MAAM,EAAE,KADsC;AAE9CC,MAAAA,OAAO,EAAE;AACL,wBAAgB,SADX;AAEL,4BAAoB,IAFf;AAGL,2BAAmB,+BAHd;AAIL,0BACI;AALC;AAFqC,KAAtB,CAA5B;AAWA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB,CAd+B,CAgB/B;;AACA,QAAIN,IAAI,CAACO,QAAL,CAAc,OAAd,CAAJ,EAA4B;AACxBb,MAAAA,UAAU,CAACW,IAAI,CAACG,OAAN,CAAV;AACH,KAFD,MAEO,IAAIR,IAAI,CAACO,QAAL,CAAc,SAAd,CAAJ,EAA8B;AACjCb,MAAAA,UAAU,CAACW,IAAI,CAACI,aAAN,CAAV;AACH,KAFM,MAEA;AACHf,MAAAA,UAAU,CAACW,IAAI,CAACZ,OAAN,CAAV;AACH;;AAEDG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GA1BD;;AA4BA,sBACI,QAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHG,MAAAA,UADG;AAEHN,MAAAA,OAFG;AAGHI,MAAAA,UAHG;AAIHC,MAAAA,aAJG;AAKHH,MAAAA;AALG,KADX;AAAA,cASKH;AATL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CA/CM;;GAAMD,qB;;KAAAA,qB;AAiDb,OAAO,MAAMmB,gBAAgB,GAAG;AAAA;;AAAA,SAAMvB,UAAU,CAACE,aAAD,CAAhB;AAAA,CAAzB;;IAAMqB,gB","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\nconst ResultContext = createContext();\r\nconst baseUrl = \"https://google-search3.p.rapidapi.com/api/v1\";\r\n\r\nexport const ResultContextProvider = ({ children }) => {\r\n    const [results, setResults] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState(\"Maths\");\r\n\r\n    // /videos, /search, /images\r\n    const getResults = async (type) => {\r\n        setIsLoading(true);\r\n\r\n        const response = await fetch(`${baseUrl}${type}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"x-user-agent\": \"desktop\",\r\n                \"x-proxy-location\": \"US\",\r\n                \"x-rapidapi-host\": \"google-search3.p.rapidapi.com\",\r\n                \"x-rapidapi-key\":\r\n                    \"290dc5d251msh9256771c29f1735p1b278ejsna6a427f07e04\",\r\n            },\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        // console.log(type, data, searchTerm);\r\n        if (type.includes(\"/news\")) {\r\n            setResults(data.entries);\r\n        } else if (type.includes(\"/images\")) {\r\n            setResults(data.image_results);\r\n        } else {\r\n            setResults(data.results);\r\n        }\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    return (\r\n        <ResultContext.Provider\r\n            value={{\r\n                getResults,\r\n                results,\r\n                searchTerm,\r\n                setSearchTerm,\r\n                isLoading,\r\n            }}\r\n        >\r\n            {children}\r\n        </ResultContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useResultContext = () => useContext(ResultContext);\r\n"]},"metadata":{},"sourceType":"module"}